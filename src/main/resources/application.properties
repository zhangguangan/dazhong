#app.id = dazhong
#
#apollo.bootstrap.enabled=true
##将配置中心加载时机提前，可以管理logback日志配置
#apollo.bootstrap.eagerLoad.enabled=true
##多个namespace用英文逗号分隔
#apollo.bootstrap.namespaces=application
#apollo.meta=http://118.25.0.69:8080





server.port = 8080
server.servlet.context-path = /dazhong
#日志文件配置
logging.config = classpath:logger/log4j2.xml

spring.servlet.multipart.max-file-size = 20MB

spring.servlet.multipart.max-request-size = 100MB

spring.http.encoding.force = true

#web.upload-path=D:/home/media/
#spring.mvc.static-path-pattern=/upload/**
#spring.resources.static-locations=file:${web.upload-path}
#spring.mvc.static-path-pattern=/home/media/

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url = jdbc:mysql://118.25.0.69:3306/lengendsneverdie?useSSL=false
#spring.datasource.username = root
#spring.datasource.password = 123456
#
#
#mybatis.type-aliases-package = com.zga.dazhong.wxs.modules.entity
#mybatis.mapper-locations = classpath:mybatis/mapper/*.xml


######################################################################
# 数据源 ds0,ds1
spring.shardingsphere.datasource.names=ds0,ds1
# 第一个数据库
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://192.168.64.128:3306/ds0?useSSL=false&&characterEncoding=utf-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

# 第二个数据库
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://192.168.64.128:3306/ds1?useSSL=false&&characterEncoding=utf-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}

# 分表策略 其中user为逻辑表 分表主要取决于age行
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=age
# 分片算法表达式
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}

# 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
#sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id

# 打印执行的数据库以及语句
spring.shardingsphere.props.sql.show=true
spring.main.allow-bean-definition-overriding=true

#mybatis-plus.mapper-locations=classpath:mapper/*xml
mybatis-plus.mapper-locations=classpath:mybatis/mapper/*.xml

